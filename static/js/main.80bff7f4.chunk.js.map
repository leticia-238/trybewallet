{"version":3,"sources":["actions/index.js","components/Logo/Logo.js","pages/Login/Login.js","components/Header/Header.js","services/fetchExchangeApi.js","components/ExpenseForm/ExpenseForm.js","helpers/formatToCash.js","components/ExpensesTable/ExpensesTable.js","pages/Wallet/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["receiveDataCurrencies","data","type","currencies","Object","keys","filter","currency","currenciesData","Logo","className","Login","handleInput","target","name","value","setState","validLoginForm","email","password","isValidLogin","test","length","state","this","dispatch","props","htmlFor","id","onChange","disabled","onClick","saveUser","Component","connect","Header","totalExpenses","data-testid","defaultProps","user","wallet","fetchExchange","a","fetch","response","json","ExpenseForm","defaultState","description","method","tag","map","currencyName","key","expense","formatToCash","result","parseFloat","Math","floor","replace","ExpensesTable","expenses","exchangeRates","ask","toFixed","Wallet","isLogged","exact","path","to","Boolean","window","location","hostname","match","INITIAL_STATE","action","isFetching","calcTotalExpenses","total","exchangeValue","totalValue","rootReducers","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80bff7f4.chunk.js","sourcesContent":["const SAVE_USER = 'SAVE_USER';\n\nconst REQUEST_DATA_CURRENCIES = 'REQUEST_DATA_CURRENCIES';\nconst RECEIVE_DATA_CURRENCIES = 'RECEIVE_DATA_CURRENCIES';\n\nconst SAVE_EXPENSE = 'SAVE_EXPENSE';\n\nexport const saveUser = (email) => ({\n  type: SAVE_USER,\n  email,\n});\n\nexport const requestDataCurrencies = () => ({\n  type: REQUEST_DATA_CURRENCIES,\n});\n\nexport const receiveDataCurrencies = (data) => ({\n  type: RECEIVE_DATA_CURRENCIES,\n  currencies: Object.keys(data).filter((currency) => currency !== 'USDT'),\n  currenciesData: data,\n});\n\nexport const saveExpense = (expense) => ({\n  type: SAVE_EXPENSE,\n  expense,\n});\n\nexport { SAVE_USER, REQUEST_DATA_CURRENCIES, RECEIVE_DATA_CURRENCIES, SAVE_EXPENSE };\n","import { GiWallet } from 'react-icons/gi';\nimport React from 'react';\nimport './Logo.css';\n\nfunction Logo() {\n  return (\n    <div className=\"logo\">\n      <figure>\n        <GiWallet className=\"icon-wallet\" />\n      </figure>\n      <h2 className=\"title-wallet\">Wallet</h2>\n    </div>\n  );\n}\n\nexport default Logo;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { saveUser } from '../../actions';\nimport Logo from '../../components/Logo/Logo';\nimport './Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      isValidLogin: false,\n    };\n  }\n\n  handleInput = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n    this.validLoginForm();\n  }\n\n  validLoginForm = () => {\n    this.setState(({ email, password }) => {\n      const emailRegex = /\\S+@\\S+\\.com/;\n      const minChar = 6;\n      const isValidLogin = emailRegex.test(email) && password.length >= minChar;\n      return { isValidLogin };\n    });\n  }\n\n  render() {\n    const { email, password, isValidLogin } = this.state;\n    const { dispatch } = this.props;\n    return (\n      <form className=\"login-form\">\n        <Logo />\n        <label htmlFor=\"email-input\" className=\"label\">\n          email\n          <input\n            type=\"text\"\n            id=\"email-input\"\n            className=\"input\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.handleInput }\n          />\n        </label>\n        <label htmlFor=\"password-input\" className=\"label\">\n          senha\n          <input\n            type=\"password\"\n            id=\"password-input\"\n            className=\"input\"\n            name=\"password\"\n            value={ password }\n            onChange={ this.handleInput }\n          />\n        </label>\n        <button\n          type=\"button\"\n          className=\"btn\"\n          disabled={ !isValidLogin }\n          onClick={ () => dispatch(saveUser(email)) }\n        >\n          Entrar\n        </button>\n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Logo from '../Logo/Logo';\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n    const { email, totalExpenses } = this.props;\n    return (\n      <header className=\"header\">\n        <Logo />\n        <h2 data-testid=\"email-field\" className=\"email-field\">{ email }</h2>\n        <div className=\"header-field\">\n          <p data-testid=\"total-field\" className=\"total-field\">\n            {totalExpenses}\n          </p>\n          <p data-testid=\"header-currency-field\" className=\"header-currency-field\">BRL</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  user: { email },\n  wallet: { totalExpenses } }) => ({ email, totalExpenses });\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  totalExpenses: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  totalExpenses: '0.00',\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import { requestDataCurrencies, receiveDataCurrencies } from '../actions';\n\nconst fetchExchange = () => {\n  const url = 'https://economia.awesomeapi.com.br/json/all';\n  return async (dispatch) => {\n    dispatch(requestDataCurrencies());\n    const response = await fetch(url);\n    const data = await response.json();\n    return dispatch(receiveDataCurrencies(data));\n  };\n};\n\nexport default fetchExchange;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { saveExpense } from '../../actions';\nimport fetchExchange from '../../services/fetchExchangeApi';\nimport './ExpenseForm.css';\n\nclass ExpenseForm extends Component {\n  constructor() {\n    super();\n    this.defaultState = {\n      value: '0',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n\n    this.state = {\n      ...this.defaultState,\n    };\n  }\n\n  handleInput = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    const { currencies, dispatch } = this.props;\n    return (\n      <form className=\"expense-form\">\n        <label htmlFor=\"description-input\" className=\"label\">\n          Descrição\n          <input\n            type=\"text\"\n            id=\"description-input\"\n            name=\"description\"\n            className=\"input\"\n            value={ description }\n            onChange={ this.handleInput }\n          />\n        </label>\n        <label htmlFor=\"value-input\" className=\"label value\">\n          Valor\n          <input\n            type=\"number\"\n            id=\"value-input\"\n            name=\"value\"\n            className=\"input\"\n            value={ value }\n            onChange={ this.handleInput }\n          />\n        </label>\n        <label htmlFor=\"currency-input\" className=\"label currency\">\n          Moeda\n          <select\n            id=\"currency-input\"\n            name=\"currency\"\n            className=\"input\"\n            value={ currency }\n            onChange={ this.handleInput }\n          >\n            {currencies.map((currencyName) => (\n              <option key={ currencyName } value={ currencyName }>\n                {currencyName}\n              </option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"method-input\" className=\"label\">\n          Método de pagamento\n          <select\n            id=\"method-input\"\n            name=\"method\"\n            className=\"input\"\n            onChange={ this.handleInput }\n            value={ method }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag-input\" className=\"label\">\n          Categoria\n          <select\n            id=\"tag-input\"\n            name=\"tag\"\n            className=\"input\"\n            onChange={ this.handleInput }\n            value={ tag }\n          >\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={ () => {\n            dispatch(saveExpense(this.state));\n            dispatch(fetchExchange());\n            this.setState({ ...this.defaultState });\n          } }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet: { currencies } }) => ({ currencies });\n\nExpenseForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(ExpenseForm);\n","const formatToCash = (value) => {\n  let result;\n  if (typeof value === 'string') {\n    result = parseFloat(value);\n  }\n  result = Math.floor(value * 100);\n  result = `${result}`.replace(/([0-9]{2}$)/, '.$1');\n  return result;\n};\n\nexport default formatToCash;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport formatToCash from '../../helpers/formatToCash';\nimport './ExpensesTable.css';\n\nclass ExpensesTable extends Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table className=\"expenses-table\">\n        <caption>Moeda de conversão: Real</caption>\n        <thead className=\"table-titles\">\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n          </tr>\n        </thead>\n        <tbody className=\"table-items\">\n          {expenses\n            .map(({ currency, id, description, tag, method, value, exchangeRates }) => {\n              const { ask, name } = exchangeRates[currency];\n              return (\n                <tr key={ id }>\n                  <td>{ description }</td>\n                  <td>{ tag }</td>\n                  <td>{ method }</td>\n                  <td>{ formatToCash(value) }</td>\n                  <td>{name}</td>\n                  <td>{ parseFloat(ask).toFixed(2) }</td>\n                  <td>\n                    {\n                      formatToCash(parseFloat(value) * parseFloat(ask))\n                    }\n                  </td>\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet: { expenses } }) => ({ expenses });\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(ExpensesTable);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../../components/Header/Header';\nimport fetchExchange from '../../services/fetchExchangeApi';\nimport ExpenseForm from '../../components/ExpenseForm/ExpenseForm';\nimport ExpensesTable from '../../components/ExpensesTable/ExpensesTable';\nimport './Wallet.css';\n\nclass Wallet extends Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(fetchExchange());\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <main className=\"main-content\">\n          <ExpenseForm />\n          <div className=\"wrapper-table\">\n            <ExpensesTable />\n          </div>\n        </main>\n      </>\n    );\n  }\n}\n\nWallet.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(Wallet);\n","import React from 'react';\nimport { Redirect, Switch } from 'react-router-dom';\nimport { Route } from 'react-router-dom/cjs/react-router-dom.min';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Login from './pages/Login/Login';\nimport Wallet from './pages/Wallet/Wallet';\n\nfunction App(props) {\n  const { isLogged } = props;\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        {isLogged\n          ? <Redirect to=\"/carteira\" />\n          : <Login />}\n      </Route>\n      <Route exact path=\"/carteira\">\n        <Wallet />\n      </Route>\n    </Switch>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  isLogged: state.user.isLogged,\n});\n\nApp.propTypes = {\n  isLogged: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SAVE_USER } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  isLogged: false,\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  const { email } = action;\n  switch (action.type) {\n  case SAVE_USER:\n    return { email, isLogged: true };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import {\n  REQUEST_DATA_CURRENCIES,\n  RECEIVE_DATA_CURRENCIES,\n  SAVE_EXPENSE }\nfrom '../actions';\nimport formatToCash from '../helpers/formatToCash';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  totalExpenses: '0.00',\n  currenciesData: {},\n  isFetching: false,\n};\n\nconst calcTotalExpenses = (total, { value, currency, exchangeRates }) => {\n  const exchangeValue = exchangeRates[currency].ask;\n  const totalValue = parseFloat(total) + parseFloat(value) * parseFloat(exchangeValue);\n  return formatToCash(totalValue);\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  const { currencies, currenciesData, expense } = action;\n\n  switch (action.type) {\n  case REQUEST_DATA_CURRENCIES:\n    return { ...state, isFetching: true };\n\n  case RECEIVE_DATA_CURRENCIES:\n    return { ...state, currencies, currenciesData, isFetching: false };\n\n  case SAVE_EXPENSE:\n    expense.id = state.expenses.length;\n    expense.exchangeRates = state.currenciesData;\n    return {\n      ...state,\n      expenses: [...state.expenses, expense],\n      totalExpenses: calcTotalExpenses(state.totalExpenses, expense),\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducers = combineReducers({ user, wallet });\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}